AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Connect as an Amazon Pinpoint Channel

Parameters:
  ProfileDomainName:
    Type: String
    Default: AnyCompanyDomain
    Description: Customer Profile Domain Name
  ProfileObjectTypeName:
    Type: String
    Default: MarketingAssignedOffers
    Description: Customer Profile registered Object Type Name
  OfferName:
    Type: String
    Default: '30% Off Renewal'
    Description: Offer Name that was viewed or not viewed
  LayerVersionArn:
    Type: String
    Description: Lambda Layer ARN containing the Python Boto3 SDK with version 1.16.28 or later

Resources:

  OfferViewedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt OfferViewedChannelLambda.Arn
      Principal: !Sub pinpoint.${AWS::Region}.amazonaws.com
      SourceArn: !Sub arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*

  OfferNotViewedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt OfferNotViewedChannelLambda.Arn
      Principal: !Sub pinpoint.${AWS::Region}.amazonaws.com
      SourceArn: !Sub arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/*


  OfferViewedChannelLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt OfferViewedChannelLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref LayerVersionArn
      Environment:
        Variables:
          PROFILE_DOMAIN_NAME: !Ref ProfileDomainName
          PROFILE_OBJECT_TYPE_NAME: !Ref ProfileObjectTypeName
          OFFER_NAME: !Ref OfferName
          OFFER_VIEWED: true
          LOG_LEVEL: "INFO"
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import os

          client = boto3.client('customer-profiles')

          domain_name = os.environ.get('PROFILE_DOMAIN_NAME')
          object_type_name = os.environ.get('PROFILE_OBJECT_TYPE_NAME')
          offer_name = os.environ.get('OFFER_NAME')
          offer_viewed = os.environ.get('OFFER_VIEWED')

          def lambda_handler(event, context):
              global log_level
              log_level = str(os.environ.get("LOG_LEVEL")).upper()
              if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
                  log_level = "ERROR"
              logging.getLogger().setLevel(log_level)

              logging.info(event)

              # Loop over each incoming Endpoint
              for endpointId,endpoint in event['Endpoints'].items():

                request = {
                  offerName: offer_name,
                  offerViewed: offer_viewed,
                  endpoint: endpoint,
                  UserId: endpoint['User']['UserId']
                }

                if endpoint['ChannelType'] == 'EMAIL':
                  request['email'] = endpoint['Address']
                elif endpoint['ChannelType'] == 'PHONE':
                  request['phone'] = endpoint['Address']

                response = client.put_profile_object(
                  ObjectTypeName=object_type_name,
                  Object=json.dumps(request),
                  DomainName=domain_name
                )

                logging.info(response)

  OfferNotViewedChannelLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt OfferViewedChannelLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref LayerVersionArn
      Environment:
        Variables:
          PROFILE_DOMAIN_NAME: !Ref ProfileDomainName
          PROFILE_OBJECT_TYPE_NAME: !Ref ProfileObjectTypeName
          OFFER_NAME: !Ref OfferName
          OFFER_VIEWED: false
          LOG_LEVEL: "INFO"
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import os

          client = boto3.client('customer-profiles')

          domain_name = os.environ.get('PROFILE_DOMAIN_NAME')
          object_type_name = os.environ.get('PROFILE_OBJECT_TYPE_NAME')
          offer_name = os.environ.get('OFFER_NAME')
          offer_viewed = os.environ.get('OFFER_VIEWED')

          def lambda_handler(event, context):
              global log_level
              log_level = str(os.environ.get("LOG_LEVEL")).upper()
              if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
                  log_level = "ERROR"
              logging.getLogger().setLevel(log_level)

              logging.info(event)

              # Loop over each incoming Endpoint
              for endpointId,endpoint in event['Endpoints'].items():

                request = {
                  offerName: offer_name,
                  offerViewed: offer_viewed,
                  endpoint: endpoint,
                  UserId: endpoint['User']['UserId']
                }

                if endpoint['ChannelType'] == 'EMAIL':
                  request['email'] = endpoint['Address']
                elif endpoint['ChannelType'] == 'PHONE':
                  request['phone'] = endpoint['Address']

                response = client.put_profile_object(
                  ObjectTypeName=object_type_name,
                  Object=json.dumps(request),
                  DomainName=domain_name
                )

                logging.info(response)


  OfferViewedChannelLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "profile:PutProfileObject"
                Resource:
                  - !Sub "arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${ProfileDomainName}/object-types/${ProfileObjectTypeName}"
                  - !Sub "arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${ProfileDomainName}"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  RegisterProfileObjectType:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceHelper.Arn
      CustomResourceAction: RegisterProfileObjectType

  CustomResourceHelper:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CustomResourceHelperRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref LayerVersionArn
      Environment:
        Variables:
          PROFILE_DOMAIN_NAME: !Ref ProfileDomainName
          PROFILE_OBJECT_TYPE_NAME: !Ref ProfileObjectTypeName
          LOG_LEVEL: "INFO"
      Code:
        ZipFile: |
          import json
          import logging
          import traceback
          import boto3
          import os
          import cfnresponse

          client = boto3.client('customer-profiles')

          domain_name = os.environ.get('PROFILE_DOMAIN_NAME')
          object_type_name = os.environ.get('PROFILE_OBJECT_TYPE_NAME')

          def lambda_handler(event, context):
              global log_level
              log_level = str(os.environ.get("LOG_LEVEL")).upper()
              if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
                  log_level = "ERROR"
              logging.getLogger().setLevel(log_level)

              logging.info(event)

              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "RegisterProfileObjectTypeLambda")

              elif event['ResourceProperties']['CustomResourceAction'] == 'RegisterProfileObjectType':

                try:
                  response = client.put_profile_object_type(
                    DomainName=domain_name,
                    ObjectTypeName=object_type_name,
                    Description='Marketing Managed Offers',
                    ExpirationDays=1000,
                    AllowProfileCreation=True,
                    Fields={
                      'UserId': {
                        'Source': '_source.UserId',
                        'Target': '_profile.AccountNumber',
                        'ContentType': 'STRING'
                      },
                      'email': {
                        'Source': '_source.email',
                        'Target': '_profile.EmailAddress',
                        'ContentType': 'EMAIL_ADDRESS'
                      },
                      'phone': {
                        'Source': '_source.phone',
                        'Target': '_profile.PhoneNumber',
                        'ContentType': 'PHONE_NUMBER'
                      },
                      'offer': {
                        'Source': '_source.offerName',
                        'Target': '_profile.Attributes.offerName',
                        'ContentType': 'STRING'
                      },
                      'OfferView': {
                        'Source': '_source.offerViewed',
                        'Target': '_profile.Attributes.offerViewed',
                        'ContentType': 'STRING'
                      }
                    },
                    Keys={
                      '_account': [
                        {
                          'StandardIdentifiers': ['PROFILE','UNIQUE'],
                          'FieldNames': [
                            'UserId',
                          ]
                        },
                      ],
                      "_email": [
                        {
                          'FieldNames': ['email']
                        }
                      ],
                      '_phone': [
                        {
                          'FieldNames': ['phone']
                        }
                      ]
                    }
                  )

                  logging.info(response)

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "RegisterProfileObjectTypeLambda")
                except Exception as error:
                  logging.error('An Exception occured')
                  logging.error('lambda_handler error: %s' % (error))
                  logging.error('lambda_handler trace: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "RegisterProfileObjectTypeLambda")

              else:
                logging.error('No valid input')
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, "RegisterProfileObjectTypeLambda")

  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "profile:PutProfileObjectType"
                Resource:
                  - !Sub "arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${ProfileDomainName}/object-types/${ProfileObjectTypeName}"
                  - !Sub "arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${ProfileDomainName}"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
